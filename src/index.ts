import axios, { AxiosRequestConfig } from 'axios';
import { app, BrowserWindow, ipcMain, Menu, Notification, session, shell, Tray } from 'electron';
import path from 'path';
import NotificationIcon from './domain/enum/notification-icon';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const WINDOW_TITLE = 'Vira-lata Caramelo - Rastreador de imÃ³veis';
const FAVICON = path.join(__dirname, 'images/icons/favicon.png');

let mainWindow: Electron.BrowserWindow;
let tray: Tray;

declare global {
  interface Window {
    electron: {
      notificationApi: {
        sendNotification: (icon: NotificationIcon, title: string, body: string) => void
      },
      httpApi: {
        makeRequest: (request: AxiosRequestConfig) => Promise<string>,
        getBase64: (request: AxiosRequestConfig) => Promise<string>,
      },
      externalApi: {
        open: (url: string) => void,
      }
    }
  }
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 720,
    width: 1280,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    title: WINDOW_TITLE,
    icon: FAVICON,
  });

  // and remove default toolbar
  mainWindow.removeMenu();

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ['default-src * data: \'unsafe-inline\' \'unsafe-hashes\' \'unsafe-eval\' ; img-src * data:'],
        'X-Content-Security-Policy': ['default-src * data: \'unsafe-inline\' \'unsafe-hashes\' \'unsafe-eval\' ; img-src * data:'],
      },
    });
  });
};

function show() {
  mainWindow?.show();
}

function quit() {
  app.quit();
}

function createTray(): void {
  tray = new Tray(FAVICON);
  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Mostrar', type: 'normal', role: 'window', click: show,
    },
    {
      label: 'Sair', type: 'normal', click: quit,
    },
  ]);

  tray.setToolTip(WINDOW_TITLE);
  tray.setContextMenu(contextMenu);
  tray.on('double-click', show);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  createTray();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('notify', (_, icon: NotificationIcon, title: string, body: string) => {
  const iconFilepath = path.join(__dirname, `images/icons/${icon}`);

  new Notification({
    title,
    body,
    icon: iconFilepath,
  }).show();
});

ipcMain.handle('makeRequest', async (_, request: AxiosRequestConfig): Promise<string> => {
  const response = await axios(request);
  return JSON.stringify(response.data);
});

ipcMain.handle('getBase64', async (_, request: AxiosRequestConfig): Promise<string> => {
  const response = await axios(request);
  return Buffer.from(response.data, 'binary').toString('base64');
});

ipcMain.on('open', (_, url: string) => {
  shell.openExternal(url);
});
